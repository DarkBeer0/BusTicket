Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Database configuration\r\nspring.datasource.url=jdbc:postgresql://localhost:5432/my_ticket_service_db\r\nspring.datasource.username=postgres\r\nspring.datasource.password=password!\r\nspring.datasource.driver-class-name=org.postgresql.Driver\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\r\n\r\n# Custom properties\r\nuser.ticket.update.enabled=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 54e65f08ef97c62116c549153567cad1e1d7dba6)
+++ b/src/main/resources/application.properties	(date 1720867402936)
@@ -1,4 +1,3 @@
-# Database configuration
 spring.datasource.url=jdbc:postgresql://localhost:5432/my_ticket_service_db
 spring.datasource.username=postgres
 spring.datasource.password=password!
@@ -7,5 +6,4 @@
 spring.jpa.show-sql=true
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 
-# Custom properties
-user.ticket.update.enabled=true
\ No newline at end of file
+my.custom.bean.enabled=true
Index: src/main/resources/logback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><configuration>\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"STDOUT\"/>\r\n    </root>\r\n    <logger name=\"org.hibernate\" level=\"INFO\"/>\r\n    <logger name=\"org.springframework\" level=\"INFO\"/>\r\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder>\r\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n</configuration>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml
--- a/src/main/resources/logback.xml	(revision 54e65f08ef97c62116c549153567cad1e1d7dba6)
+++ b/src/main/resources/logback.xml	(date 1720883299734)
@@ -1,13 +1,11 @@
 <configuration>
-    <root level="INFO">
-        <appender-ref ref="STDOUT"/>
-    </root>
-    <logger name="org.hibernate" level="INFO"/>
-    <logger name="org.springframework" level="INFO"/>
     <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
         <encoder>
             <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
         </encoder>
     </appender>
 
-</configuration>
\ No newline at end of file
+    <root level="info">
+        <appender-ref ref="STDOUT"/>
+    </root>
+</configuration>
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>BusTicket</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>2.17.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.postgresql</groupId>\r\n            <artifactId>postgresql</artifactId>\r\n            <version>42.7.3</version>\r\n        </dependency>\r\n        <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>6.1.10</version>\r\n        </dependency>\r\n        <!-- https://mvnrepository.com/artifact/junit/junit -->\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.13.2</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.hibernate</groupId>\r\n            <artifactId>hibernate-core</artifactId>\r\n            <version>6.5.2.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.hibernate</groupId>\r\n            <artifactId>hibernate-hikaricp</artifactId>\r\n            <version>6.5.2.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.30</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.persistence</groupId>\r\n            <artifactId>javax.persistence-api</artifactId>\r\n            <version>2.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>6.1.3</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-orm</artifactId>\r\n            <version>6.1.3</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>1.7.36</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>ch.qos.logback</groupId>\r\n            <artifactId>logback-classic</artifactId>\r\n            <version>1.2.10</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.annotation</groupId>\r\n            <artifactId>javax.annotation-api</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n    </dependencies>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 54e65f08ef97c62116c549153567cad1e1d7dba6)
+++ b/pom.xml	(date 1720883227911)
@@ -77,12 +77,32 @@
         <dependency>
             <groupId>ch.qos.logback</groupId>
             <artifactId>logback-classic</artifactId>
-            <version>1.2.10</version>
+            <version>1.2.11</version>
         </dependency>
         <dependency>
             <groupId>javax.annotation</groupId>
             <artifactId>javax.annotation-api</artifactId>
             <version>1.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-config</artifactId>
+            <version>6.2.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-web</artifactId>
+            <version>6.2.1</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-autoconfigure</artifactId>
+            <version>3.2.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.data</groupId>
+            <artifactId>spring-data-commons</artifactId>
+            <version>3.2.2</version>
         </dependency>
     </dependencies>
 </project>
\ No newline at end of file
Index: src/main/java/repository/TicketRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/repository/TicketRepository.java b/src/main/java/repository/TicketRepository.java
new file mode 100644
--- /dev/null	(date 1720867363871)
+++ b/src/main/java/repository/TicketRepository.java	(date 1720867363871)
@@ -0,0 +1,9 @@
+package repository;
+
+import entity.Ticket;
+import org.springframework.data.repository.CrudRepository;
+import java.util.List;
+
+public interface TicketRepository extends CrudRepository<Ticket, Integer> {
+    List<Ticket> findByUserId(int userId);
+}
Index: src/main/java/controller/TicketController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/TicketController.java b/src/main/java/controller/TicketController.java
new file mode 100644
--- /dev/null	(date 1720867353976)
+++ b/src/main/java/controller/TicketController.java	(date 1720867353976)
@@ -0,0 +1,20 @@
+package controller;
+
+import entity.Ticket;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+import repository.TicketRepository;
+
+@RestController
+public class TicketController {
+
+    @Autowired
+    private TicketRepository ticketRepository;
+
+    @GetMapping("/ticket")
+    public Ticket getTicket(@RequestParam int id) {
+        return ticketRepository.findById(id).orElse(null);
+    }
+}
Index: src/main/java/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/config/SecurityConfig.java b/src/main/java/config/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1720867278898)
+++ b/src/main/java/config/SecurityConfig.java	(date 1720867278898)
@@ -0,0 +1,40 @@
+package config;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.core.userdetails.User;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.provisioning.InMemoryUserDetailsManager;
+import org.springframework.security.web.SecurityFilterChain;
+
+@Configuration
+@EnableWebSecurity
+public class SecurityConfig {
+
+    @Bean
+    public UserDetailsService userDetailsService() {
+        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
+        manager.createUser(User.withDefaultPasswordEncoder()
+                .username("user")
+                .password("password")
+                .roles("USER")
+                .build());
+        return manager;
+    }
+
+    @Bean
+    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
+        http
+                .authorizeHttpRequests(authz -> authz
+                        .anyRequest().authenticated()
+                )
+                .httpBasic(withDefaults());
+        return http.build();
+    }
+
+    private static <T> T withDefaults() {
+        return (T) org.springframework.security.config.Customizer.withDefaults();
+    }
+}
Index: src/main/java/config/MyConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/config/MyConfig.java b/src/main/java/config/MyConfig.java
new file mode 100644
--- /dev/null	(date 1720866990424)
+++ b/src/main/java/config/MyConfig.java	(date 1720866990424)
@@ -0,0 +1,15 @@
+package config;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class MyConfig {
+
+    @Bean
+    @ConditionalOnProperty(name = "my.custom.bean.enabled", havingValue = "true")
+    public String ThisIsMyFirstConditionalBean() {
+        return "This is my first conditional bean!";
+    }
+}
Index: src/main/java/main/UserCommandLineRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/UserCommandLineRunner.java b/src/main/java/main/UserCommandLineRunner.java
new file mode 100644
--- /dev/null	(date 1720883004681)
+++ b/src/main/java/main/UserCommandLineRunner.java	(date 1720883004681)
@@ -0,0 +1,29 @@
+package main;
+
+import entity.User;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.CommandLineRunner;
+import org.springframework.stereotype.Component;
+import repository.UserRepository;
+
+import java.sql.Timestamp;
+
+@Component
+public class UserCommandLineRunner implements CommandLineRunner {
+
+    @Autowired
+    private UserRepository userRepository;
+
+    @Override
+    public void run(String... args) throws Exception {
+        User user = new User("John Doe", new Timestamp(System.currentTimeMillis()));
+        userRepository.save(user);
+        User foundUser = userRepository.findById(user.getId()).orElse(null);
+        System.out.println("Found User: " + (foundUser != null ? foundUser.getName() : "Not found"));
+        if (foundUser != null) {
+            foundUser.setName("Jane Doe");
+            userRepository.save(foundUser);
+        }
+        userRepository.delete(foundUser);
+    }
+}
Index: src/main/java/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/UserController.java b/src/main/java/controller/UserController.java
new file mode 100644
--- /dev/null	(date 1720882907345)
+++ b/src/main/java/controller/UserController.java	(date 1720882907345)
@@ -0,0 +1,32 @@
+package controller;
+
+import entity.User;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+import service.UserService;
+
+import java.util.Optional;
+
+@RestController
+@RequestMapping("/users")
+public class UserController {
+
+    @Autowired
+    private UserService userService;
+
+    @PostMapping
+    public User createUser(@RequestBody User user) {
+        return userService.saveUser(user);
+    }
+
+    @GetMapping("/{id}")
+    public User getUserById(@PathVariable int id) {
+        return userService.getUserById(id).orElse(null);
+    }
+
+    @DeleteMapping("/{id}")
+    public void deleteUser(@PathVariable int id) {
+        Optional<User> user = userService.getUserById(id);
+        user.ifPresent(userService::deleteUser);
+    }
+}
Index: src/main/java/main/BusTicketValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport config.AppConfig;\r\nimport dao.TicketDAO;\r\nimport dao.UserDAO;\r\nimport entity.Ticket;\r\nimport entity.User;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport service.TicketService;\r\n\r\nimport java.sql.Timestamp;\r\nimport java.util.List;\r\n\r\npublic class BusTicketValidator {\r\n    public static void main(String[] args) {\r\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\r\n\r\n        TicketDAO ticketDAO = context.getBean(TicketDAO.class);\r\n        UserDAO userDAO = context.getBean(UserDAO.class);\r\n        TicketService ticketService = context.getBean(TicketService.class);\r\n\r\n        User user = userDAO.findById(151);\r\n        Ticket ticket = new Ticket(6,151, \"VIP\", new Timestamp(System.currentTimeMillis()));\r\n        userDAO.updateUserAndCreateTicket(user, ticket);\r\n\r\n        System.out.println(\"User ID: \" + user.getId());\r\n        System.out.println(\"Number of tickets: \" + user.getTickets().size());\r\n\r\n        List<Ticket> ticketsFromFile = ticketService.getTickets();\r\n        System.out.println(\"Tickets from file: \" + ticketsFromFile);\r\n\r\n        context.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/BusTicketValidator.java b/src/main/java/main/BusTicketValidator.java
--- a/src/main/java/main/BusTicketValidator.java	(revision 54e65f08ef97c62116c549153567cad1e1d7dba6)
+++ b/src/main/java/main/BusTicketValidator.java	(date 1720883323923)
@@ -1,34 +1,12 @@
 package main;
 
-import config.AppConfig;
-import dao.TicketDAO;
-import dao.UserDAO;
-import entity.Ticket;
-import entity.User;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import service.TicketService;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
 
-import java.sql.Timestamp;
-import java.util.List;
-
+@SpringBootApplication(scanBasePackages = {"config", "controller", "entity", "repository", "service", "main"})
 public class BusTicketValidator {
+
     public static void main(String[] args) {
-        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
-
-        TicketDAO ticketDAO = context.getBean(TicketDAO.class);
-        UserDAO userDAO = context.getBean(UserDAO.class);
-        TicketService ticketService = context.getBean(TicketService.class);
-
-        User user = userDAO.findById(151);
-        Ticket ticket = new Ticket(6,151, "VIP", new Timestamp(System.currentTimeMillis()));
-        userDAO.updateUserAndCreateTicket(user, ticket);
-
-        System.out.println("User ID: " + user.getId());
-        System.out.println("Number of tickets: " + user.getTickets().size());
-
-        List<Ticket> ticketsFromFile = ticketService.getTickets();
-        System.out.println("Tickets from file: " + ticketsFromFile);
-
-        context.close();
+        SpringApplication.run(BusTicketValidator.class, args);
     }
 }
Index: src/main/java/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/repository/UserRepository.java b/src/main/java/repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1720867377505)
+++ b/src/main/java/repository/UserRepository.java	(date 1720867377505)
@@ -0,0 +1,7 @@
+package repository;
+
+import entity.User;
+import org.springframework.data.repository.CrudRepository;
+
+public interface UserRepository extends CrudRepository<User, Integer> {
+}
Index: src/main/java/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/service/UserService.java b/src/main/java/service/UserService.java
new file mode 100644
--- /dev/null	(date 1720882841330)
+++ b/src/main/java/service/UserService.java	(date 1720882841330)
@@ -0,0 +1,27 @@
+package service;
+
+import entity.User;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import repository.UserRepository;
+
+import java.util.Optional;
+
+@Service
+public class UserService {
+
+    @Autowired
+    private UserRepository userRepository;
+
+    public User saveUser(User user) {
+        return userRepository.save(user);
+    }
+
+    public Optional<User> getUserById(int id) {
+        return userRepository.findById(id);
+    }
+
+    public void deleteUser(User user) {
+        userRepository.delete(user);
+    }
+}
